# Print warning message

# # echo ""
# echo "  IF PROBLEM:"
# echo "%    execute the following, then restart Terminal:"
# echo ""
# echo "      '/bin/mv ~/.bash_profile ~/.bash_profile.disabled'"
# echo "
# echo ""



# Load the shell dotfiles, and then some:
# * ~/.path can be used to extend `$PATH`.
# * ~/.extra can be used for other settings you donâ€™t want to commit.
# FROM:
#   github.com/simensen/dotfiles
for file in ~/.bash/{path,bash_{prompt,exports,aliases,functions},extra}; do
    [ -r "${file}" ] && [ -f "${file}" ] && source "${file}";
done
unset file


_es_init_dotfiles() {
  local _shell="$SHELL"

  # add pwd to stack; cd to home directory
  pushd
  local dotdir="${HOME}/.${_shell}"
  mkdir -p "$dotdir"
  pushd 

 
  for file in ~/."${_shell}"/{path,bash_{prompt,exports,aliases,functions},extra}; do
    [[ -n $file ]] && source $file;
  done
  unset file
} 


# ------- where.bash ------- #
# see Brett Terpstra project 'where'
# export WHERE_HOOK_SOURCE=true
# export WHERE_EXPIRATION=86400   # once a day
# source "$HOME/bin/_where.bash"



# ------- SHELL OPTIONS ------- #
if [[ $SHELL =~ "bash" ]]; then
  shopt -s nocaseglob;  # Case insensitive globbing
                        # used in pathname expansion.
  shopt -s histappend;  # Append to the Bash history file 
  shopt -s cdspell;     # Autocorrect typos in path names when using `cd`
fi

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
if [[ $SHELL =~ "bash" ]]; then
  for _option in autocd globstar; do
    shopt -s "$_option" 2>/dev/null;
  done
  unset _option
fi

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
# MACOS: complete -W "NSGlobalDomain" defaults;


#:
#: `killall` tab completion
#:
#: This adds tab completion for common apps to 'killall' command
if [[ uname -s =~ '[dD]arwin' ]]; then
  complete -o "nospace" -W "Bartender Calendar Contacts Copied Dash Day\ One Dock Drafts \
    Dropbox Dropzone Finder Firefox Hook HoudahSpot iTunes Mail Messages nvALT Paste
    PathFinder \
    PyCharm Safari Sublime\ Text SystemUIServer Terminal Twitter VimR VSCode Yoink" killall;
fi

# TODO: look into first
# Import ssh keys in keychain
# ssh-add -A 2>/dev/null;


# ==================
# |||--- CORE ---|||
# ==================

# source ~/.color_prompt.sh

# ===== VIM MODE ===== 
# Use Vim keymappings in terminal
set -o vi


[[ -n ~/.local/bin/bashmarks.sh ]] && source ~/.local/bin/bashmarks.sh



# source "/usr/local/bin/virtualenvwrapper.sh"




# ====================
# |||--- LINODE ---|||
# ====================

# ====linode-cli======
#source /usr/local/etc/bash_completion.d/linode-cli.sh




# ==========================
# |||--- CHEAT ---|||
# ==========================

#source "$HOME/bin/cheat.bash"



# =====================
# |||--- EDITING ---|||
# ==========================

# Most of these Editing aliases are from Brett Terpstra:
#   http://brettterpstra.com/2013/03/31/a-few-more-of-my-favorite-shell-aliases/

# make executable: ax {{filename(s)}}
alias ax="chmod a+x"

# Disable [g]ate[k]eeper quarantine
alias disgk="sudo xattr -rd com.apple.quarantine "
alias delquar="sudo xattr -rd com.apple.quarantine "
alias del-quar="sudo xattr -rd com.apple.quarantine "
alias noquar="sudo xattr -rd com.apple.quarantine "


unquarantine() {
  sudo xattr -rd com.apple.quarantine "$@"
} 


function fuck () {
	TF_PYTHONIOENCODING=$PYTHONIOENCODING;
	export TF_SHELL=bash;
	export TF_ALIAS=fuck;
	export TF_SHELL_ALIASES=$(alias);
	export TF_HISTORY=$(fc -ln -10);
	export PYTHONIOENCODING=utf-8;
	TF_CMD=$(
	    thefuck THEFUCK_ARGUMENT_PLACEHOLDER "$@"
	) && eval "$TF_CMD";
	unset TF_HISTORY;
	export PYTHONIOENCODING=$TF_PYTHONIOENCODING;
	history -s $TF_CMD;
}



# powerline-daemon -q
# POWERLINE_BASH_CONTINUATION=1
# POWERLINE_BASH_SELECT=1
# . /usr/local/lib/python3.7/site-packages/powerline/bindings/bash/powerline.sh


# ==========================
# |||--- APPLICATIONS ---|||
# ==========================


# =============================
# |||--- File Navigation ---|||
# =============================


#:
#: bd
#: --
#:
#: Traverse parent directories with 'bd p[ath]' instead of 'cd../../'
#: From https://github.com/vigneshwaranr/bd
#:
#: See GitHub link for above alias for completion instructions.
#:
#: To install:
#:
#: _es_install_bd() {
#:   if [ -r /usr/local/bin/bd ]; then
#:     wget --no-check-certificate -O /usr/local/bin/bd https://raw.github.com/vigneshwaranr/bd/master/bd
#:     chmod +rx /usr/local/bin/bd
#:     if ! grep -q 'alias bd' ~/.bashrc; then
#:         echo 'alias bd=". bd -si"' >> ~/.bashrc
#:     fi
#:   fi 
#: }
[[ -x bd ]] && alias bd=". bd -si"


#:
#: bashmarks
#:
[[ -n ~/.local/bin/bashmarks.sh ]] && source "${HOME}/bin/bash_completion.d/bd"

# ==================
# |||--- FASD ---|||
# ==================
if type fasd &>/dev/null; then
  # Interactive fasd
  alias zi="fasd -e cd -i"
  # FASD executable init
  eval "$(fasd --init auto)"
fi


#:
#: dir_colors
#:
if type dircolors &>/dev/null; then
  [[ -r "~/.dir_colors" ]] && eval $(dircolors ~/.dir_colors)
fi


# =================================
# |||--- FUNCTIONS & SCRIPTS ---|||
# =================================

# --------------------------
#     TAB COMPLETIONS
# --------------------------

# ===== HOMEBREW =====
if type brew &>/dev/null; then
  # Homebrew tab completion
  HOMEBREW_PREFIX="${BREW_PREFIX:-$(brew --prefix)}"
 
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      [[ -r "$COMPLETION" ]] && source "$COMPLETION"
    done
    unset COMPLETION
  fi
fi


# make tab cycle through commands after listing
bind '"\t":menu-complete'
bind "set show-all-if-ambiguous on"
bind "set completion-ignore-case on"
bind "set menu-complete-display-prefix on"


#:
#: hub completions
#:
[[ -f /usr/local/etc/bash_completion.d/hub.bash_completion.sh ]] && . /usr/local/etc/bash_completion.d/hub.bash_completion.sh
[[ -f ~/bin/bash_completion.d/hub.bash_completion.sh ]] && . ~/bin/bash_completion.d/hub.bash_completion.sh



# ------- CLIMATE CLI COMPLETION ------- #
#source /etc/bash_completion.d/climate_completion


# ------- iTERM 2 ------- #
test -e "${HOME}/.iterm2_shell_integration.bash" && \
        source "${HOME}/.iterm2_shell_integration.bash"

# ------- RVM ------- #
# Load RVM into a shell session *as a function*
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"    


# ------- PIP COMPLETION ------- #
# START >>>pip bash completion <<<
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                    COMP_CWORD=$COMP_CWORD \
                    PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# END >>>pip bash completion<<<


# ------- PIP3 COMPLETION ------- #
# START >>>pip3 bash completion <<<
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                    COMP_CWORD=$COMP_CWORD \
                    PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip3
# END >>>pip3 bash completion<<<


# Created by `userpath` on 2019-10-19 03:13:35
export PATH="$PATH:/Users/esio/.local/bin"


# export PYTHONSTARTUP="~/.esio/python_startup.py"

# ------- PYENV ------- #

eval "$(pyenv init -)"  # TO TURN OFF PYENV:
			#  - comment this line 
			#  - source dotfiles

export PYENV_ROOT="$HOME/.pyenv"


# ------- VIRTUALENVWRAPPER ------- #
# export WORKON_HOME="$HOME/.envs"
# export VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python3"
# export PROJECT_HOME="$HOME/devel/projects"



# ------- PIPENV ------- #
export PIPENV_VENV_IN_PROJECT=1
export PIPENV_DEFAULT_PYTHON_VERSION="/Users/esio/.pyenv/shims/python"
# export PIPENV_PYTHON="/Users/esio/.pyenv/versions/3.8.0/bin/python3.8"

## -- pipenv completion -- ##
_pipenv_completion() {
    local IFS=$'\t'
    COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   _PIPENV_COMPLETE=complete-bash $1 ) )
    return 0
}

if type pipenv &>/dev/null; then
  complete -F _pipenv_completion -o default pipenv
fi
## ----------------------- ##


# ------- PIPX ------- #
if type pipx &>/dev/null && type register-python-argcomplete &>/dev/null; then
  eval "$(register-python-argcomplete pipx)"
fi 


export PATH="$PYENV_ROOT/bin:$PATH:$HOME/scripts":"$HOME/.local":"$HOME/bin":"/usr/local/sbin"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash


# ------- STARSHIP ------- #
if type starship &>/dev/null; then
  eval "$(starship init bash)"
fi 


# ------- GH ------- #
if type gh &>/dev/null; then
  eval "$(gh completion -s bash)"
fi

